name: Release

on:
  schedule:
    - cron:  '0 0 * * *'

  workflow_dispatch:

jobs:

  check-new-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.new_version.outputs.NEW_VERSION }}
    steps:

      - name: Release if newer version
        id: new_version
        run: |
          CURRENT_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/michaelruocco/wiremock-docker.git '*.*.*' | tail -1 | cut -d '/' -f3)
          CURRENT_VERSION=${CURRENT_VERSION%-*}
          LATEST_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/michaelruocco/wiremock.git '*.*.*' | tail -1 | cut -d '/' -f3)
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]
          then
            echo "NEW_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [check-new-version]
    if: needs.check-new-version.outputs.new_version
    strategy:
      matrix:
        versions:
          - IMAGES:
              - michaelruocco/wiremock:latest
              - michaelruocco/wiremock:${{ needs.check-new-version.outputs.new_version }}
            CONTEXT: .
            PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7
          - IMAGES:
              - wiremock/wiremock:latest-alpine
              - wiremock/wiremock:${{ needs.check-new-version.outputs.new_version }}-alpine
            CONTEXT: alpine
            PLATFORMS: linux/amd64
    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ matrix.versions.CONTEXT != 'alpine' }}
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Checkout sources
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Update version
        run: |
          # Replace version in Dockerfiles
          CURRENT_VERSION=$(git describe --abbrev=0 --tags)
          CURRENT_VERSION=${CURRENT_VERSION%-*}
          NEW_VERSION=${{ needs.check-new-version.outputs.new_version }}
          sed -i s/${CURRENT_VERSION}/${NEW_VERSION}/g Dockerfile alpine/Dockerfile

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Wiremock Docker image to Docker HUB
        run: docker buildx build --tag ${{ join(matrix.versions.IMAGES, ' --tag ') }} --platform ${{ matrix.versions.PLATFORMS }} --push ${{ matrix.versions.CONTEXT }}

  release:
    runs-on: ubuntu-latest
    needs: [docker-build-push, check-new-version]
    steps:

      - name: Checkout sources
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Update version
        run: |
          # Replace version in readme.md
          LAST_VERSION=$(git describe --tag --abbrev=0)
          LAST_MINOR_VERSION=${LAST_VERSION%.*}
          NEW_VERSION=${{ needs.check-new-version.outputs.new_version }}
          NEW_MINOR_VERSION=${NEW_VERSION%.*}
          sed -i s/${LAST_VERSION}/${NEW_VERSION}/g readme.md
          sed -i s/${LAST_MINOR_VERSION}/${NEW_MINOR_VERSION}/g readme.md

          # Replace version in Dockerfiles
          LAST_VERSION=${LAST_VERSION%-*}
          sed -i s/${LAST_VERSION}/${NEW_VERSION}/g Dockerfile alpine/Dockerfile

          # Push update
          git config --local user.name "michaelruocco"
          git config --local user.email "michael.ruocco@hotmail.com"
          git add .
          git commit -m "upgrade to version $NEW_VERSION"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/michaelruocco/wiremock-docker.git
          git push origin main

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-new-version.outputs.new_version }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: wiremock
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          repository: wiremock/wiremock
          short-description: Official images for the WireMock standalone server
          readme-filepath: ./readme.md
